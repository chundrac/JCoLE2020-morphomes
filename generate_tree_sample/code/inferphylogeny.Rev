seed(1234)

taxa <- readTaxonData("../data/taxa.tsv")

cc = readDiscreteCharacterData("../data/cc.nex")
sc = readDiscreteCharacterData("../data/sc.nex")

source("constraints.Rev")

n_taxa <- taxa.size()

moves = VectorMoves()

speciation_rate ~ dnLognormal(-7, 10)
speciation_rate.setValue(0.0003)
extinction_rate ~ dnLognormal(-7, 10)
extinction_rate.setValue(0.0005)

moves.append( mvScale(speciation_rate, lambda=1,    weight=1, tune=TRUE) )

moves.append( mvScale(extinction_rate, lambda=1,    weight=1, tune=TRUE) )


rho ~ dnBeta(1, 1)
moves.append( mvScale(rho, lambda=1,    weight=1, tune=TRUE) )




origin_time ~ dnUniform(2400, 2600)


moves.append( mvSlide(origin_time, delta=1,
                      weight=1.0, tune=TRUE) )




bd_dist = dnBDP(rootAge=origin_time,
                lambda=speciation_rate,
                mu=extinction_rate,
                rho=rho,
                taxa=taxa)

tree ~ dnConstrainedTopology(bd_dist, constraints=constraints)

#tree ~ dnConstrainedTopology(bd_dist)

moves.append( mvCollapseExpandFossilBranch(tree, origin_time, weight=10.0) )

moves.append( mvNodeTimeSlideUniform(tree, weight=10.0) )
moves.append( mvRootTimeSlideUniform(tree, origin_time, weight=10.0) )

moves.append( mvNNI(tree, weight=50))
moves.append( mvNarrow(tree, weight=50))
moves.append( mvFNPR(tree, weight=50) )



source("calibrations.Rev")

# tip calibration

#fossils = tree.getFossils()
#for (i in 1:fossils.size()) {
#  t[i] := tmrca(tree, clade(fossils[i]))
#  a_i = fossils[i].getMinAge()
#  b_i = fossils[i].getMaxAge()
#  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
#  F[i].clamp( 0 )
#}

#moves.append( mvFossilTimeSlideUniform(tree, origin_time, weight=10.0) )


## # Relaxed clock

n_branches <- 2 * n_taxa - 2

mu ~ dnNormal(-7, 10)

moves.append(mvSlide(mu, delta=1, weight=1.0, tune=TRUE))

sigma ~ dnExp(1)

moves.append( mvScale(sigma, lambda=1,  weight=1.0, tune=TRUE) )


for (i in 1:2) {
  branch_rates_mean[i] ~ dnLognormal(mu, sigma)
  moves.append( mvScale(branch_rates_mean[i], lambda=1,  weight=1.0, tune=TRUE) )

  for (j in 1:n_branches) {
    branch_rates[i][j] ~ dnExp(1/branch_rates_mean[i])
    moves.append( mvScale(branch_rates[i][j], lambda=1,  weight=1.0, tune=TRUE) )
  }
  moves.append( mvVectorScale(branch_rates[i], lambda=1,  weight=1.0, tune=TRUE) )
}

## Model of character evolution

coding = ["variable", "all"]

for (i in 1:2) {
  pi[i] ~ dnDirichlet(v(1,1))
  moves.append(mvBetaSimplex(pi[i], alpha=1, tune=TRUE))
  moves.append(mvDirichletSimplex(pi[i], alpha=1, tune=TRUE))
  Q[i]:= fnGTR(simplex(v(1)),pi[i])
  alpha_prior_mean[i] <- ln(5.0)
  alpha_prior_sd[i] <- 0.587405
  alpha[i] ~ dnLognormal(alpha_prior_mean[i], alpha_prior_sd[i])
  moves.append(mvScale(alpha[i], lambda=1, tune=TRUE))
  gamma_rates[i] := fnDiscretizeGamma(alpha[i], alpha[i], 4)
  seq[i] ~ dnPhyloCTMC(tree=tree, Q=Q[i],
                       rootFrequencies=pi[i],
                       branchRates=branch_rates[i],
                       siteRates=gamma_rates[i],
                       type="Standard",
                       coding=coding[i])
}

pi1 := pi[1]
pi2 := pi[2]
branch_rates1 := branch_rates[1]
branch_rates2 := branch_rates[2]

seq[1].clamp(cc)
seq[2].clamp(sc)


nNodes = 2*n_taxa-1
for (i in 1:nNodes) {
  nodeAge[i] := tree.nodeAge(i)
}

mymodel = model(seq)

monitors = VectorMonitors()

thinning = 100
nruns = 4
nchains = 4
monitors.append( mnModel(filename="output/romance.p", printgen=thinning) )

monitors.append(mnFile(filename="output/romance.t", printgen=thinning, tree))

monitors.append( mnScreen(printgen=thinning))

mymcmc = mcmcmc(mymodel, monitors, moves, nruns=nruns, nchains=nchains)

#mymcmc.burnin(1000, tuningInterval=100)
mymcmc.run(generations=50000, tuningInterval=100)

mymcmc.operatorSummary()

mccTree(readTreeTrace("output/romance_run_1.t"), file="romance.mcc.tre")


q()
